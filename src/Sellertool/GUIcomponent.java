/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Sellertool;

import DataStore.Dinosaur;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Formatter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Jacob
 */
public class GUIcomponent extends javax.swing.JFrame{
     ArrayList<Dinosaur> bonelist = new ArrayList<>();
     Boolean filesloaded = false;
     Boolean maploaded= false;
     Dinosaur temp = new Dinosaur();
     Formatter output = new Formatter();
    /**
     * Creates new form GUIcomponent
     */
    //Sellertool maintool = new Sellertool();
    public GUIcomponent() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MapDisplay = new javax.swing.JPanel();
        MenuBAR = new javax.swing.JMenuBar();
        filemenudropdown = new javax.swing.JMenu();
        LoadFilesSele = new javax.swing.JMenuItem();
        SaveFilesSele = new javax.swing.JMenuItem();
        ExitSele = new javax.swing.JMenuItem();
        MapDropDown = new javax.swing.JMenu();
        ChangeLocationSele = new javax.swing.JMenuItem();
        BoneMenu = new javax.swing.JMenu();
        MakeBoneSele = new javax.swing.JMenuItem();
        Sell = new javax.swing.JMenuItem();
        ModifyBone = new javax.swing.JMenuItem();
        RemoveBone = new javax.swing.JMenuItem();
        SellerDropDownMenu = new javax.swing.JMenu();
        NewSeller = new javax.swing.JMenuItem();
        DeleteSeller = new javax.swing.JMenuItem();
        ListSeller = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MapDisplay.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 255, 255), 4, true));

        javax.swing.GroupLayout MapDisplayLayout = new javax.swing.GroupLayout(MapDisplay);
        MapDisplay.setLayout(MapDisplayLayout);
        MapDisplayLayout.setHorizontalGroup(
            MapDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 879, Short.MAX_VALUE)
        );
        MapDisplayLayout.setVerticalGroup(
            MapDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 616, Short.MAX_VALUE)
        );

        filemenudropdown.setText("File");

        LoadFilesSele.setText("Load");
        LoadFilesSele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadFilesSeleActionPerformed(evt);
            }
        });
        filemenudropdown.add(LoadFilesSele);

        SaveFilesSele.setText("Save");
        SaveFilesSele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveFilesSeleActionPerformed(evt);
            }
        });
        filemenudropdown.add(SaveFilesSele);

        ExitSele.setActionCommand("Exit");
        ExitSele.setLabel("Exit");
        ExitSele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitSeleActionPerformed(evt);
            }
        });
        filemenudropdown.add(ExitSele);

        MenuBAR.add(filemenudropdown);

        MapDropDown.setLabel("Map");

        ChangeLocationSele.setLabel("ChangeLocation");
        ChangeLocationSele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeLocationSeleActionPerformed(evt);
            }
        });
        MapDropDown.add(ChangeLocationSele);

        MenuBAR.add(MapDropDown);

        BoneMenu.setLabel("Bone");

        MakeBoneSele.setLabel("MakeBone");
        MakeBoneSele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeBoneSeleActionPerformed(evt);
            }
        });
        BoneMenu.add(MakeBoneSele);

        Sell.setLabel("SellBone");
        Sell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellActionPerformed(evt);
            }
        });
        BoneMenu.add(Sell);

        ModifyBone.setLabel("ModifyBone");
        BoneMenu.add(ModifyBone);

        RemoveBone.setLabel("RemoveBone");
        BoneMenu.add(RemoveBone);

        MenuBAR.add(BoneMenu);

        SellerDropDownMenu.setLabel("Seller");

        NewSeller.setLabel("NewSeller");
        SellerDropDownMenu.add(NewSeller);

        DeleteSeller.setLabel("DeleteSeller");
        SellerDropDownMenu.add(DeleteSeller);

        ListSeller.setLabel("ListSellers");
        ListSeller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListSellerActionPerformed(evt);
            }
        });
        SellerDropDownMenu.add(ListSeller);

        MenuBAR.add(SellerDropDownMenu);

        setJMenuBar(MenuBAR);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(MapDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(MapDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SaveFilesSeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveFilesSeleActionPerformed
        //save the files
        { int i;  
            if(!bonelist.isEmpty()){
                try {//sends to file
                        File Bonetext = new File("Bones.txt");
                        Formatter filewriter = new Formatter(Bonetext);

                        for(i=0;i<bonelist.size();i++){
                            temp = bonelist.get(i);
                           // filewriter.format( "%d,%d,%f,%f,%d,%f,%f,%f,%f,%f,%d,%s,%s,%s,%s%\n",temp.boneID,temp.age,temp.price,temp.weight,temp.bought,temp.globe_longitude,temp.globe_latitude,temp.length,temp.width,temp.height,temp.buyer_id,temp.name,temp.condition,temp.country,temp.prospector );
                           //output.format("%d,%f,%f,%f,%d,%s\n", temp.boneID, temp.price, temp.coordinates.longi, temp.coordinates.latit,temp.buyer.ID,temp.name);
                           filewriter.format("%d,%f,%d,%f,%f,%d,%s%n", temp.boneID, temp.price,temp.bought,temp.coordinates.longi, temp.coordinates.latit,temp.buyer.ID,temp.name);
                        }
                        output.format("\nFiles are saved...\n");
                        filewriter.close();

                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(Sellertool.class.getName()).log(Level.SEVERE, null, ex); 
                    }
                }else{
                output.format("No Bones to save%n");
                }
            }  
        
    }//GEN-LAST:event_SaveFilesSeleActionPerformed

    private void LoadFilesSeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFilesSeleActionPerformed
        //Load all files
        //load files
                if(!bonelist.isEmpty())
                {                   //if bones array is empty clear it to so not to stack it
                    bonelist.clear();
                }
                makeabonefromfiles();//calls line 164 make bones fron bone,txt
                          
                filesloaded = true; //makes bool value true for out of sequenced malfunctions
                maploaded = true;
                output.format("\n Files are Loaded...\n");
        
    }//GEN-LAST:event_LoadFilesSeleActionPerformed

    private void MakeBoneSeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeBoneSeleActionPerformed
       //makeBone
       BoneMenu
        
    }//GEN-LAST:event_MakeBoneSeleActionPerformed

    private void SellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SellActionPerformed

    private void ListSellerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListSellerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ListSellerActionPerformed

    private void ExitSeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitSeleActionPerformed
        // System Exit
       System.exit(0);
    }//GEN-LAST:event_ExitSeleActionPerformed

    private void ChangeLocationSeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeLocationSeleActionPerformed
        // ChangeBone Location
       
        
        
    }//GEN-LAST:event_ChangeLocationSeleActionPerformed

    
    public void makeabonefromfiles()
        {   
            File BoneFile;
            Scanner scanstream;
            
            try {
            BoneFile = new File("Bones.txt");
            scanstream = new Scanner(BoneFile);
            
            while(scanstream.hasNextLine()){
                scanstream.useDelimiter(",");
              
                String buffer = scanstream.nextLine();
                
                if(buffer.isEmpty()) {
                    break;
                }
                //split string and strip white space
                String[] data = buffer.split(",");
                
                 Dinosaur temp = new Dinosaur();
                
                temp.boneID = Integer.parseInt(data[0].trim());
                        //temp.age = Integer.parseInt(data[1].trim());
                temp.price = Float.parseFloat(data[1].trim());
                        //temp.weight = Float.parseFloat(data[3].trim());
                temp.bought = Integer.parseInt(data[2].trim());
                temp.coordinates.longi= Double.parseDouble(data[3].trim());
                temp.coordinates.latit= Double.parseDouble(data[4].trim());
                        //temp.length = Float.parseFloat(data[7].trim());
                        //temp.width = Float.parseFloat(data[8].trim());
                        //temp.height = Float.parseFloat(data[9].trim());
                temp.buyer.ID = Integer.parseInt(data[5].trim());
                temp.name = data[6].trim();
                        //temp.condition = data[12].trim();
                        //temp.country = data[13].trim();
                        //temp.prospector  = data[14].trim();
                        //temp.Location.latit = temp.globe_latitude;
                        //temp.Location.longi = temp.globe_longitude;
                        //temp.Location.updatecoordinates();
                temp.coordinates.updatecoordinates();
                //change_continent_price(temp,moved); //moved is false//goes to new bone price change piece line 815
                bonelist.add(temp);
                        //output.format("%s", temp.prospector);
                        //scanstream.nextLine();
            }//while
            scanstream.close();//close the stream
        } //makeabonefrom files
        catch (FileNotFoundException ex) {
            Logger.getLogger(Sellertool.class.getName()).log(Level.SEVERE, null, ex);
        }
     }//make bone from files
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIcomponent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIcomponent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIcomponent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIcomponent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIcomponent().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu BoneMenu;
    private javax.swing.JMenuItem ChangeLocationSele;
    private javax.swing.JMenuItem DeleteSeller;
    private javax.swing.JMenuItem ExitSele;
    private javax.swing.JMenuItem ListSeller;
    private javax.swing.JMenuItem LoadFilesSele;
    private javax.swing.JMenuItem MakeBoneSele;
    private javax.swing.JPanel MapDisplay;
    private javax.swing.JMenu MapDropDown;
    private javax.swing.JMenuBar MenuBAR;
    private javax.swing.JMenuItem ModifyBone;
    private javax.swing.JMenuItem NewSeller;
    private javax.swing.JMenuItem RemoveBone;
    private javax.swing.JMenuItem SaveFilesSele;
    private javax.swing.JMenuItem Sell;
    private javax.swing.JMenu SellerDropDownMenu;
    private javax.swing.JMenu filemenudropdown;
    // End of variables declaration//GEN-END:variables
}
