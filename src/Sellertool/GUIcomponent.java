/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Sellertool;
import DataStore.Coordinates;
import java.awt.Dimension;
import DataStore.MakeBoneDialog;
import DataStore.MakeBoneStringPrmt;
import DataStore.ModifyBone;
import DataStore.RemovePrompt;
import DataStore.SellerDelePrompt;
import DataStore.SellerPrompt;
import DataStore.SuggestPrice;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.FilteredImageSource;
import java.awt.image.ImageFilter;
import java.awt.image.ImageProducer;
import java.awt.image.RGBImageFilter;
import java.io.File;
import java.io.IOException;
import java.util.Formatter;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
/**
 *
 * @author Jacob
 */
public class GUIcomponent extends javax.swing.JFrame{
   Sellertool GUISellertool = new Sellertool();
   Seller GUISeller = new Seller(0);//
   int i;
   Formatter output = new Formatter(System.out);
   File file;
   Dimension d;
   JLabel map_label;
   SellerDelePrompt delesellerprmt;
   RemovePrompt rmprompt;
   SellerPrompt sellerprompt;
   MakeBoneStringPrmt makeboneprmpt;
   SuggestPrice SuggPriceprmpt; 
   ModifyBone modboneprompt;
     /**
     * Creates new form GUIcomponent
     */
    //Sellertool maintool = new Sellertool();
    public GUIcomponent() {
        initComponents();
        map_label = new JLabel(new ImageIcon(new ImageIcon("WorldMap.png").getImage().getScaledInstance(3600/3,1800/3,Image.SCALE_SMOOTH)));
        map_label.setSize(3600/3,1800/3);
        map_label.setBackground(Color.MAGENTA);
        d = new Dimension();
        d.setSize(3600/3,1800/3);
        map_label.setMaximumSize(d);        
        this.add(map_label);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        MenuBAR = new javax.swing.JMenuBar();
        filemenudropdown = new javax.swing.JMenu();
        LoadFilesSele = new javax.swing.JMenuItem();
        SaveFilesSele = new javax.swing.JMenuItem();
        ExitSele = new javax.swing.JMenuItem();
        MapDropDown = new javax.swing.JMenu();
        ShowBoneButton = new javax.swing.JMenuItem();
        SellerDropDownMenu = new javax.swing.JMenu();
        NewSeller = new javax.swing.JMenuItem();
        DeleteSeller = new javax.swing.JMenuItem();
        ListSeller = new javax.swing.JMenuItem();
        BoneMenu = new javax.swing.JMenu();
        MakeBoneSele = new javax.swing.JMenuItem();
        Sell = new javax.swing.JMenuItem();
        ModifyBone = new javax.swing.JMenuItem();
        RemoveBone = new javax.swing.JMenuItem();
        LineInput = new javax.swing.JMenuItem();

        jFileChooser1.setCurrentDirectory(new java.io.File("C:\\Users\\Jacob\\Documents\\GitHub\\sellertool"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                formComponentAdded(evt);
            }
        });

        filemenudropdown.setText("File");

        LoadFilesSele.setText("Load");
        LoadFilesSele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadFilesSeleActionPerformed(evt);
            }
        });
        filemenudropdown.add(LoadFilesSele);

        SaveFilesSele.setText("Save");
        SaveFilesSele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveFilesSeleActionPerformed(evt);
            }
        });
        filemenudropdown.add(SaveFilesSele);

        ExitSele.setActionCommand("Exit");
        ExitSele.setLabel("Exit");
        ExitSele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitSeleActionPerformed(evt);
            }
        });
        filemenudropdown.add(ExitSele);

        MenuBAR.add(filemenudropdown);

        MapDropDown.setLabel("Map");

        ShowBoneButton.setText("Scramble");
        ShowBoneButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShowBoneButtonMouseClicked(evt);
            }
        });
        ShowBoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowBoneButtonActionPerformed(evt);
            }
        });
        MapDropDown.add(ShowBoneButton);

        MenuBAR.add(MapDropDown);

        SellerDropDownMenu.setLabel("Seller");

        NewSeller.setLabel("NewSeller");
        NewSeller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewSellerActionPerformed(evt);
            }
        });
        SellerDropDownMenu.add(NewSeller);

        DeleteSeller.setLabel("DeleteSeller");
        DeleteSeller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteSellerActionPerformed(evt);
            }
        });
        SellerDropDownMenu.add(DeleteSeller);

        ListSeller.setLabel("ListSellers");
        ListSeller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListSellerActionPerformed(evt);
            }
        });
        SellerDropDownMenu.add(ListSeller);

        MenuBAR.add(SellerDropDownMenu);

        BoneMenu.setLabel("Bone");

        MakeBoneSele.setLabel("MakeBone");
        MakeBoneSele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeBoneSeleActionPerformed(evt);
            }
        });
        BoneMenu.add(MakeBoneSele);

        Sell.setLabel("SellBone");
        Sell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellActionPerformed(evt);
            }
        });
        BoneMenu.add(Sell);

        ModifyBone.setLabel("ModifyBone");
        ModifyBone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyBoneActionPerformed(evt);
            }
        });
        BoneMenu.add(ModifyBone);

        RemoveBone.setLabel("RemoveBone");
        RemoveBone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveBoneActionPerformed(evt);
            }
        });
        BoneMenu.add(RemoveBone);

        LineInput.setText("LineInput");
        LineInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineInputActionPerformed(evt);
            }
        });
        BoneMenu.add(LineInput);

        MenuBAR.add(BoneMenu);

        setJMenuBar(MenuBAR);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 676, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SaveFilesSeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveFilesSeleActionPerformed
        //save the files
        //GUISellertool.mainmenu("savefiles");  //have to rewrte to feed in variable files
        jFileChooser1.showOpenDialog(null);
        file = jFileChooser1.getSelectedFile();
        GUISellertool.savefile(file);
    }//GEN-LAST:event_SaveFilesSeleActionPerformed

    private void LoadFilesSeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFilesSeleActionPerformed
      //load files
      
      jFileChooser1.showOpenDialog(null);
      file = jFileChooser1.getSelectedFile(); //have to rewrte to feed in variable files
      GUISellertool.makeabonefromfiles(file);
      this.put_bones_on_map();
                          
    }//GEN-LAST:event_LoadFilesSeleActionPerformed

    private void SellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellActionPerformed
        // TODO add your handling code here:
        modboneprompt = new ModifyBone(this, true, GUISellertool);
        if(!GUISellertool.bonelist.isEmpty()){
        put_bones_on_map();
        }
    }//GEN-LAST:event_SellActionPerformed

    private void ListSellerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListSellerActionPerformed
        // TODO add your handling code here:
        if(GUISellertool.masterlist.isEmpty()){
            JOptionPane.showMessageDialog(this,"No Sellers Created");
        }
        StringBuilder builder = new StringBuilder("<html>"); 
        for (int i = 0; i < GUISellertool.masterlist.size(); i++) {
            builder.append(GUISellertool.masterlist.get(i).name);
            builder.append("<br>");
        }
        builder.append("</html>");
        JOptionPane.showMessageDialog
            (null, builder.toString(), "Seller List", JOptionPane.INFORMATION_MESSAGE);
            //reference http://stackoverflow.com/questions/16984221/display-arraylist-contents-in-a-joptionpane-showmessagedialog
        
    }//GEN-LAST:event_ListSellerActionPerformed

    private void ExitSeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitSeleActionPerformed
        // System Exit
       System.exit(0);
    }//GEN-LAST:event_ExitSeleActionPerformed

    private void MakeBoneSeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeBoneSeleActionPerformed
        // TODO add your handling code here:
        MakeBoneDialog makebone = new MakeBoneDialog(this,true,GUISellertool); //pass pointer to the GUI seller 
        makebone.setVisible(true); 
        i = GUISellertool.bonelist.size(); //gets the pos of last bone to use to call sugg price
        i = i-1;                           //subtracts 1 to restablish 0 items
        try{SuggPriceprmpt = new SuggestPrice(this,true,GUISellertool.bonelist.get(i)); //calls suggestprice prompt
        }catch(ArrayIndexOutOfBoundsException e){
            
        }
        if(!GUISellertool.bonelist.isEmpty()){
            put_bones_on_map();
        }
       //GUISellertool.printbonelist();      //test print all bones in list
        makebone.dispose();      //dispose MakeBonePromt
    }//GEN-LAST:event_MakeBoneSeleActionPerformed

    private void ModifyBoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyBoneActionPerformed
        // TODO add your handling code here:
         modboneprompt = new ModifyBone(this, true, GUISellertool);//Modify bone, change price, location, buy status
        if(!GUISellertool.bonelist.isEmpty()){
            put_bones_on_map();
        }
        //refresh map
         
    }//GEN-LAST:event_ModifyBoneActionPerformed

    private void formComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentAdded

    private void RemoveBoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveBoneActionPerformed
        // remove bone prompt with are you sure prompt
        rmprompt = new RemovePrompt(this, true, GUISellertool);
        if(!GUISellertool.bonelist.isEmpty()){
            put_bones_on_map();
        }
         
    }//GEN-LAST:event_RemoveBoneActionPerformed

    private void ShowBoneButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowBoneButtonMouseClicked
        // Scamble bones in the list
        this.scramble();
        if(!GUISellertool.bonelist.isEmpty()){
            put_bones_on_map();
        }

    }//GEN-LAST:event_ShowBoneButtonMouseClicked

    private void ShowBoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowBoneButtonActionPerformed
        this.scramble();
        if(!GUISellertool.bonelist.isEmpty()){
            put_bones_on_map();
        }

    }//GEN-LAST:event_ShowBoneButtonActionPerformed

    private void NewSellerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewSellerActionPerformed
        // TODO add your handling code here:
         sellerprompt = new SellerPrompt(this,true, GUISellertool);
         
    }//GEN-LAST:event_NewSellerActionPerformed

    private void DeleteSellerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteSellerActionPerformed
        // TODO add your handling code here:
        delesellerprmt = new SellerDelePrompt(this,true,GUISellertool);
    }//GEN-LAST:event_DeleteSellerActionPerformed

    private void LineInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineInputActionPerformed
        // TODO add your handling code here:
        makeboneprmpt = new MakeBoneStringPrmt(this, true, GUISellertool);
         put_bones_on_map();
    }//GEN-LAST:event_LineInputActionPerformed
//*******************************LocalFunctions*********************************/
    public void load_world_map() {
           
        try{
            //open world map file
            File wm = new File("WorldMap.png");
            //create worldmap image
            BufferedImage map_ = ImageIO.read(wm);
            for(int i=0; i<1800; ++i) {
                for(int j=0; j<3600; ++j) {
                    Color c = new Color(map_.getRGB(j, i));
                    int red = c.getRed();
                    int green = c.getGreen();
                    int blue = c.getBlue();
                    if(red == 0 && green == 0 && blue == 255) {
                        //its blue
                        GUISellertool.map[j][i] = '.';
                    }
                    else{
                        //its green
                        GUISellertool.map[j][i] = '*';
                    }
                }
            }
            
        }
        catch(IOException ex) {
            //do something
        }
    }
    public void put_bones_on_map() {
        output.format("--------->%d",this.map_label.getComponentCount());
        String display;
        if(!GUISellertool.bonelist.isEmpty()) { 
            //empty map_label
                
                for(int i=this.map_label.getComponentCount()-1; i>=0; --i) {
                    this.map_label.remove(i);
                }
                this.map_label.validate();
            
            ImageFilter filter = new RGBImageFilter() {
	         int transparentColor = Color.white.getRGB() | 0xFF000000;

                        public final int filterRGB(int x, int y, int rgb) {


                            if ((rgb | 0xFF000000) == transparentColor) {
                              return 0x00FFFFFF & rgb;
                           } else {
                              return rgb;
                           }

                        }
	      };

            ImageIcon soldIcon = new ImageIcon("Sold.png");
            ImageIcon unsoldIcon = new ImageIcon("Unsold.png");
            Image soldImage;
            Image unsoldImage;

            ImageProducer filteredImgProd = new FilteredImageSource(soldIcon.getImage().getSource(), filter);
            soldImage = Toolkit.getDefaultToolkit().createImage(filteredImgProd);

            filteredImgProd = new FilteredImageSource(unsoldIcon.getImage().getSource(), filter);
            unsoldImage = Toolkit.getDefaultToolkit().createImage(filteredImgProd);    

              
            for(int i=0; i<GUISellertool.bonelist.size(); ++i) {
                JLabel bone_icon = new JLabel();
                bone_icon.setSize(25, 25);
                ImageIcon ic;
                if(GUISellertool.bonelist.get(i).bought == 1) {
                    ic = new ImageIcon(soldImage);
                    
                }else{
                    ic = new ImageIcon(unsoldImage);
                }
                bone_icon.setIcon(ic);
                display = GUISellertool.bonelist.get(i).name + "\n";
                display = display + Double.toString(GUISellertool.bonelist.get(i).coordinates.latit)+"\n";
                display = display + Double.toString(GUISellertool.bonelist.get(i).coordinates.longi)+"\n";
                display = display + Float.toString(GUISellertool.bonelist.get(i).price)+"\n";
                //if carnivore
                //if herb
                bone_icon.setToolTipText(display);
                int temp_x = GUISellertool.bonelist.get(i).coordinates.y;
                int temp_y = GUISellertool.bonelist.get(i).coordinates.x; 
                
                int x = temp_x/3;
                int y = temp_y/3;
                
                if(x==0) {
                    x = x - 5;
                }
                else if(x>=1179) {
                    x = 1179;
                }
                if(y >= 574) {
                    y = 574;
                }
                
                //this.map_label.setLayout(null);
                bone_icon.setLocation(x,y);
                this.map_label.add(bone_icon);
                //this.map_label.repaint();
            }
            this.map_label.validate();
            this.map_label.repaint();
        }
    
    }
  public void scramble() {
        //check if there is anything to scramble
        if(GUISellertool.bonelist.isEmpty() ) {
            JOptionPane.showMessageDialog(this,"No Data To Scramble!"); 
        }
        else{
            //correct data, scramble it
            }
            //scramble bones
            if(!GUISellertool.bonelist.isEmpty()) {
                //create temporary map
                this.load_world_map();
                //scramble each bone
                for(int i=0; i<GUISellertool.bonelist.size(); ++i) {
                    while(true) {
                        //create random coordinates
                        Random rn = new Random();
                        double temp_long = rn.nextInt((180 - (-180) + 1)) + (-180);
                        double temp_lat = rn.nextInt((90 - (-90) + 1)) + (-90);
                        Coordinates tempCoord = new Coordinates(temp_lat,temp_long);
                        int temp_x = tempCoord.y;
                        int temp_y = tempCoord.x;
                        
                        //if bone is on land, set new bone coordinate
                        if(GUISellertool.map[temp_x][temp_y] == '*') {
                            GUISellertool.bonelist.get(i).coordinates = tempCoord;
                            break; //from while loop
                        }
                    } 
                }
            
            }
    }
  

  
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIcomponent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIcomponent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIcomponent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIcomponent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIcomponent().setVisible(true);
                
            }
        });
    }
    
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu BoneMenu;
    private javax.swing.JMenuItem DeleteSeller;
    private javax.swing.JMenuItem ExitSele;
    private javax.swing.JMenuItem LineInput;
    private javax.swing.JMenuItem ListSeller;
    private javax.swing.JMenuItem LoadFilesSele;
    private javax.swing.JMenuItem MakeBoneSele;
    private javax.swing.JMenu MapDropDown;
    private javax.swing.JMenuBar MenuBAR;
    private javax.swing.JMenuItem ModifyBone;
    private javax.swing.JMenuItem NewSeller;
    private javax.swing.JMenuItem RemoveBone;
    private javax.swing.JMenuItem SaveFilesSele;
    private javax.swing.JMenuItem Sell;
    private javax.swing.JMenu SellerDropDownMenu;
    private javax.swing.JMenuItem ShowBoneButton;
    private javax.swing.JMenu filemenudropdown;
    private javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables
}
