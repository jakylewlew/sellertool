/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DataStore;

import java.util.Formatter;
import java.util.InputMismatchException;
import java.util.Scanner;



/**
 *
 * @author Jacob
 */
public class BoneCreation extends javax.swing.JPanel {
    String bonety;
    Dinosaur temp;
    Scanner input = new Scanner(System.in);
    Double price;
    Boolean badinput = false;//used to pop up bad text field input 
    
            
    
    /**
     * Creates new form BoneCreation
     */
    public BoneCreation() {
        initComponents();
        Formatter output = new Formatter(System.out);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        DinosaurSelector = new javax.swing.JComboBox();
        Dinosaurlabel = new javax.swing.JLabel();
        PriceEntry = new javax.swing.JTextField();
        PriceLabel = new javax.swing.JLabel();
        OkButton = new javax.swing.JButton();

        Title.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        Title.setText("BONECREATION");

        DinosaurSelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "\"Spinosaurus\"", "\"TyrannosaurusRex\"", "\"Gigantosaurus\"", "\"Velociraptor\"", "\"Triceratops\"", "\"Hylaeosaurus\"", "\"Amargasaurus\"", "\"Dakosaurus\"", "\"Shastasaurus\"", "\"Pterodactyl\"", "\"Pterosaurs\"", "\"Pteranodon\"" }));
        DinosaurSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DinosaurSelectorActionPerformed(evt);
            }
        });

        Dinosaurlabel.setText("Dinosaurs");

        PriceEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PriceEntryActionPerformed(evt);
            }
        });

        PriceLabel.setText("Price");

        OkButton.setLabel("Ok");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(DinosaurSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(Dinosaurlabel))
                            .addComponent(PriceEntry)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(PriceLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(371, 371, 371)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OkButton)
                            .addComponent(Title))))
                .addContainerGap(375, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Title)
                .addGap(2, 2, 2)
                .addComponent(Dinosaurlabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DinosaurSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(PriceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PriceEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 288, Short.MAX_VALUE)
                .addComponent(OkButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void DinosaurSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DinosaurSelectorActionPerformed
        // TODO add your handling code here:
         bonety = this.DinosaurSelector.getActionCommand();
        
    }//GEN-LAST:event_DinosaurSelectorActionPerformed

    private void PriceEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PriceEntryActionPerformed
        //get price
       String in = PriceEntry.getText();
       try{
           price = Double.valueOf(in);
       }catch(NumberFormatException | InputMismatchException e){ 
                    badinput = true;
                }
    }//GEN-LAST:event_PriceEntryActionPerformed
 
    
    
    public Dinosaur get_special_bone(double latitude,double longitude,String bonety, float price ){//read from a string of 4 strings lat, long, Type, price
        
        String[] specialbones = {"Spinosaurus","TyrannosaurusRex",//next
            "Gigantosaurus","Velociraptor","Triceratops","Hylaeosaurus",//next
            "Amargasaurus","Dakosaurus","Shastasaurus","Pterodactyl"//next
            ,"Pterosaurs","Pteranodon"};//list of valid bones
        
        boolean inarray = false;//starts false

        for(int i=0; i < specialbones.length; i++){//checks for valid dinosaur
            if(bonety.equals(specialbones[i])){
                inarray = true;//if in == True 
            }
        }
        if(check_lat_long(latitude,longitude) == false){//if not in bounds
            return temp;
        }
        if(inarray){    //if false retunr null line 716
           
    
            switch(bonety){//uses the 3rd string from super as a switch to make that typ of dinosaur

            case("Spinosaurus"): {

                temp = new Spinosaurus(latitude, longitude, price);//(x,y,price)
                change_continent_price(temp,moved);//moved is false
                //System.out.print(temp.adjusted_price);
                sugg_price_function(temp);
                bonelist.add(temp);
                break;
            } 
            case("TyrannosaurusRex"):{

                temp = new TyrannosaurusRex(latitude,longitude,price);//(x,y,price)
                change_continent_price(temp,moved); //moved is false
                sugg_price_function(temp);
                bonelist.add(temp);
                break;
            }
            case("Gigantosaurus"):{

                temp = new Giganotosaurus(latitude, longitude, price);//(x,y,price)
                change_continent_price(temp,moved);
                sugg_price_function(temp);
                bonelist.add(temp);
                break;
            }
            case("Velociraptor"):{

                temp = new Velociraptor(latitude, longitude, price);//(x,y, price
                change_continent_price(temp,moved);
                sugg_price_function(temp);
                bonelist.add(temp);
                break;
            }
            case("Triceratops"):{ 

                temp = new Triceratops(latitude, longitude, price);//(x,y, price
                change_continent_price(temp,moved);
                sugg_price_function(temp);
                bonelist.add(temp);
                break;
            }
            case("Hylaeosaurus"):{ 

                temp = new Hylaeosaurus(latitude, longitude, price);//(x,y, price
                change_continent_price(temp,moved);
                sugg_price_function(temp);
                bonelist.add(temp);
                break;
            }
            case("Amargasaurus"):{

                temp = new Amargasaurus(latitude, longitude, price);//(x,y, price
                change_continent_price(temp,moved);
                sugg_price_function(temp);
                bonelist.add(temp);
                break;

            }case("Dakosaurus"):{

                temp = new Dakosaurus(latitude, longitude, price);//(x,y, price
                change_continent_price(temp,moved);
                sugg_price_function(temp);
                bonelist.add(temp);
                break;
            }case("Shastasaurus"):{

                temp = new Shastasaurus(latitude, longitude, price);//(x,y, price
                change_continent_price(temp,moved);
                sugg_price_function(temp);
                bonelist.add(temp);
                break;
            }case("Pterodactyl"):{

                temp = new Pterodactyl(latitude, longitude, price);//(x,y, price
                change_continent_price(temp,moved);
                sugg_price_function(temp);
                bonelist.add(temp);
                break;
            }case("Pterosaurs"):{

                temp = new Pterodactyl(latitude, longitude, price);//(x,y, price
                change_continent_price(temp,moved);
                sugg_price_function(temp);
                bonelist.add(temp);
                break;
            }case("Pteranodon"):{

                temp = new Pteranodon(latitude, longitude, price);//(x,y, price
                change_continent_price(temp,moved);
                sugg_price_function(temp);
                bonelist.add(temp);
                break;            
            }default:{
                System.out.print("Not a valid bone please select one of the following types\nSpinosaurus\nTyrannosaurusRex"+
                        "\nGigantosaurus\nVelociraptor\nTriceratops\nHylaeosaurus\nAmargasaurus\n");
            }//default
        }//switch   
    }
    return temp;
 }
    public boolean check_lat_long(double latitude, double longitude){ //checks for valid lat and long in the make_bone_string
        boolean inbounds = true;
        if(( latitude>90) || (latitude<-90)){
                        output.format("Enter a valid Latitude value!(-90,90)%n");
                        inbounds = false;
                        
        }     
        if(( longitude>180) || (longitude<-180)){
                        output.format("Enter a valid Longitude value!(-180,180)%n");
                        inbounds = false;
                       
        }
        return inbounds; //coordinates in bounds for string input in get_special_bone, returns zero if not in bounds will nake user redo string
        
    }
    public void sugg_price_function(Dinosaur tochange){//suggests price for make bone from scratch line 327
        float newprice;
        boolean invalid = true;
        newprice = temp.pricing(tochange);
        output.format("Suggest price for this location id:$%.2f\n"
                + "Would you like to set your own price?\n"
                + "Select 1 for Yes\n"
                + "Select 2 for No\n",newprice);
        while(invalid){
        int choice = getI(); //will not quit until int is selected
        switch(choice){
            case (1):
            {   tochange.price = newprice;
                 invalid = false;//changes price to suggested price
                break;
            }
            case (2):
            {   boolean notnumber = true;
                while(notnumber){
                //output.format("Enter you price\n"); //user changes
                try{
                    newprice = input.nextFloat();
                    tochange.price = newprice;
                    notnumber = false; 
                }catch( NumberFormatException | InputMismatchException e){
                     output.format("Pease enter a dollar value-> 400.00\n");
                     input.nextLine();//clear
                 }
                }//while bot a number
                invalid = false;
                input.nextLine();//clear
                break;
            }
            default:
            {
                output.format("Enter valid selection%n");//catch all invalid
               
            }
        }//switch
        }//while loop  
    }   
    
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox DinosaurSelector;
    private javax.swing.JLabel Dinosaurlabel;
    private javax.swing.JButton OkButton;
    private javax.swing.JTextField PriceEntry;
    private javax.swing.JLabel PriceLabel;
    private javax.swing.JLabel Title;
    // End of variables declaration//GEN-END:variables
}
